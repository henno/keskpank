{
  "openapi": "3.0.2",
  "info": {
    "title": "Keskpank",
    "version": "1.0.0",
    "description": "Keskpank"
  },
  "servers": [
    {
      "url": "http://localhost:3000/",
      "description": "Local dev server"
    },
    {
      "url": "https://keskpank.diarainfra.com/",
      "description": ""
    }
  ],
  "paths": {
    "/banks": {
      "get": {
        "tags": [
          "banks"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getBanksResponse"
                }
              }
            },
            "description": "Successful request"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorMissingApiKey"
                }
              }
            },
            "description": "Missing API key"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error401InvalidApiKey"
                }
              }
            },
            "description": "Ivalid API key"
          }
        },
        "summary": "Returns a list of registered banks"
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postBanksRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "banks"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/postBanksResponse"
                }
              }
            },
            "description": "Bank successfully registered"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            },
            "description": "Bad request"
          }
        },
        "operationId": "1",
        "summary": "Register a new bank"
      }
    }
  },
  "components": {
    "schemas": {
      "postBanksResponse": {
        "title": "Response body when making POST /banks request",
        "description": "",
        "type": "object",
        "properties": {
          "_id": {
            "description": "A unique ID identifying the bank",
            "type": "string"
          },
          "name": {
            "description": "Bank's name",
            "type": "string"
          },
          "transactionUrl": {
            "description": "A URL where the central bank will make a request when another bank wants to make a transfer of funds",
            "type": "string"
          },
          "apiKey": {
            "description": "Bank's API key which must be sent with every request to central bank",
            "type": "string"
          },
          "bankPrefix": {
            "description": "Prefix for the accounts that the bank will generate. This enables the central bank to detect the destination bank from the accountTo field.",
            "type": "string"
          }
        },
        "example": {
          "_id": "5f60dec34b7a442a58703d21",
          "name": "barBank",
          "transactionUrl": "foo",
          "apiKey": "0367620d-abad-47e1-876c-b25a926ea566",
          "bankPrefix": "5b8",
          "owners": "John Smith and Jane Doe"
        }
      },
      "postBanksRequest": {
        "title": "Request body for making POST /banks request",
        "description": "",
        "type": "object",
        "properties": {
          "name": {
            "description": "Bank's name",
            "type": "string"
          },
          "transactionUrl": {
            "description": "A URL where the central bank will make a request when another bank wants to make a transfer of funds",
            "type": "string"
          },
          "bankPrefix": {
            "description": "Prefix for the accounts that the bank will generate. This enables the central bank to detect the destination bank from the accountTo field.",
            "type": "string"
          }
        },
        "example": {
          "name": "barBank",
          "transactionUrl": "http://examplebank.com/",
          "bankPrefix": "5b8",
          "owners": "John Smith and Jane Doe"
        }
      },
      "errorResponse": {
        "title": "Generic error response",
        "description": "Response body for all errors",
        "type": "object",
        "properties": {
          "error": {
            "description": "Description of the error",
            "type": "string"
          }
        },
        "example": {
          "error": "Error description here"
        }
      },
      "getBanksResponse": {
        "title": "Root Type for getBanksResponse",
        "description": "",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "transactionUrl": {
              "type": "string"
            },
            "bankPrefix": {
              "type": "string"
            },
            "owners": {
              "type": "string"
            }
          }
        },
        "example": [
          {
            "name": "barBank",
            "transactionUrl": "http://examplebank.com/",
            "bankPrefix": "199",
            "owners": "henno"
          }
        ]
      },
      "error401": {
        "title": "Root Type for error401",
        "description": "",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          }
        },
        "example": {
          "error": "unauthenticated"
        }
      },
      "errorMissingApiKey": {
        "title": "Root Type for errorMissingApiKey",
        "description": "Missing api-key header",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          }
        },
        "example": {
          "error": "Missing API key"
        }
      },
      "error401InvalidApiKey": {
        "title": "Root Type for error401InvalidApiKey",
        "description": "Invalid API key",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          }
        },
        "example": {
          "error": "Invalid API key"
        }
      }
    }
  }
}